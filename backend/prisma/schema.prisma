generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  name          String
  password_hash String
  email         String
  phone         String
  address       String
  rating_sum    Float
  rating_count  Int
  image         String?

  fundsAccount  FundsAccount? //TODO: make this mandatory..
  transactions  Transaction[]
  offers        Offer[]
  CounterOffer  CounterOffer[]
}
model Category {
  id        String   @id @default(uuid())
  name String
  Offer Offer[]
}

model Offer {
  id String @id @default(uuid())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  name        String
  description String
  price       Decimal
  category    Category[]
  pictures    String

  counterOffer   CounterOffer? @relation(name: "a")
  counterOfferId Int?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  transactionId String        @unique

  inCounterOffer CounterOffer[] @relation("CounterOfferToOffer")
}

model Transaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offer  Offer? //TODO: make this mandatory..
  seller String

  buyer   User   @relation(fields: [buyerId], references: [id])
  buyerId String

  amount Decimal
  status String
}

model FundsAccount {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  balance Decimal
}

model CounterOffer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offer   Offer  @relation(name: "a", fields: [offerId], references: [id])
  offerId String @unique

  creator   User    @relation(fields: [creatorId], references: [id])
  creatorId String

  offers    Offer[] @relation("CounterOfferToOffer")

  amount Decimal
  status String
}
